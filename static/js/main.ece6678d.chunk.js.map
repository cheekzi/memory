{"version":3,"sources":["components/Header.js","components/gameField.js","components/GameFields.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","score","hscore","GameField","zeichen","func","style","background","onClick","e","Array","prototype","shuffle","tmp","rand","i","this","length","Math","floor","random","GameFields","useState","clickedArray","setClickedArray","clickField","field","len","Object","values","includes","HS","setHS","setS","numberArray","console","log","fieldsArray","map","number","Game","setScore","setHScore","s","val","App","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAgBeA,EAbA,SAACC,GAEd,OACE,sBAAKC,UAAU,SAAf,UACI,oBAAIA,UAAU,aAAd,yBACA,sBAAKA,UAAU,cAAf,UACE,oBAAGA,UAAU,gBAAb,oBAAqCD,EAAME,SAC3C,oBAAGD,UAAU,aAAb,yBAAuCD,EAAMG,iB,SCiBxCC,G,OAxBG,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KAe3B,OACE,wBAAQL,UAAU,OAAOM,MAAO,CAACC,WAdpB,CACb,EAAG,QACH,EAAG,OACH,EAAG,SACH,EAAG,SACH,EAAG,MACH,EAAG,SACH,EAAG,YACH,EAAG,YACH,EAAG,SAKiDH,IAAWI,QAAS,SAACC,GAAD,OAAOJ,EAAKD,IAApF,SACE,iCACE,qCAAaA,UCRnBM,MAAMC,UAAUC,QAVlB,WAEI,IADA,IAAIC,EAAKC,EACDC,EAAG,EAAGA,EAAIC,KAAKC,OAAQF,IAC7BD,EAAOI,KAAKC,MAAMD,KAAKE,SAAWJ,KAAKC,QACvCJ,EAAMG,KAAKD,GACXC,KAAKD,GAAKC,KAAKF,GACfE,KAAKF,GAAOD,GAMlB,IA+BeQ,EA/BI,SAACtB,GAChB,MAAwCuB,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAa,SAACC,GAChB,IAAMC,EAAMJ,EAAaN,OACtBW,OAAOC,OAAON,GAAcO,SAASJ,IACjC3B,EAAMgC,GAAKJ,GAAK5B,EAAMiC,MAAML,GAC/B5B,EAAMkC,KAAK,GACXT,EAAgB,MAEhBA,EAAgB,GAAD,mBAAKD,GAAL,CAAmBG,KAClC3B,EAAMkC,KAAKN,EAAI,KAWzB,OACE,qBAAK3B,UAAU,gBAAf,SARoB,WAChB,IAAIkC,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG3C,OAFAA,EAAYtB,UACZuB,QAAQC,IAAIF,GACLA,EAKNG,GAAcC,KAAI,SAACC,GAChB,OAAO,cAAC,EAAD,CAAWnC,QAASmC,EAAQlC,KAAMoB,UCXtCe,EAzBF,WACT,MAA0BlB,mBAAS,GAAnC,mBAAOrB,EAAP,KAAcwC,EAAd,KACAN,QAAQC,IAAInC,GACZ,MAA4BqB,mBAAS,GAArC,mBAAOpB,EAAP,KAAewC,EAAf,KAMAP,QAAQC,IAAInC,GAMd,OACE,gCACI,cAAC,EAAD,CAAQA,MAAOA,EAAOC,OAAQA,IAC9B,8BACE,cAAC,EAAD,CAAY+B,KAdL,SAACU,GACVF,EAASE,IAaiBZ,GAAI7B,EAAQ8B,MAR5B,SAACY,GACXF,EAAUE,YCKHC,MAhBf,WACE,OACE,sBAAK7C,UAAU,MAAf,UACE,wBAAQA,UAAU,QAAlB,SACE,yBAAQA,UAAU,UAAlB,UACE,qBAAKA,UAAU,SAAS8C,IAAI,sHAAsHC,IAAI,SACtJ,4BAAY/C,UAAU,WAAtB,sBAKJ,cAAC,EAAD,QCJSgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ece6678d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nconst Header = (props) => {\r\n\r\n  return (\r\n    <div className=\"header\">\r\n        <h1 className=\"main-title\">Memory Game</h1>\r\n        <div className=\"score-board\">\r\n          <p className=\"current-score\">Score: {props.score}</p>\r\n          <p className=\"best-score\">High Score: {props.hscore}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import { getQueriesForElement } from '@testing-library/dom';\r\nimport React, { useState } from 'react';\r\n\r\nconst GameField = ({zeichen, func}) => {\r\n   \r\n  const colors = {\r\n    1: \"green\",\r\n    2: \"blue\",\r\n    3: \"yellow\",\r\n    4: \"orange\",\r\n    5: \"red\",\r\n    6: \"purple\",\r\n    7: \"darkgreen\",\r\n    8: \"turquoise\",\r\n    9: \"white\"\r\n  }\r\n\r\n\r\n  return (\r\n    <button className=\"card\" style={{background: colors[zeichen]}} onClick={(e) => func(zeichen)}>\r\n      <figure>\r\n        <figcaption>{zeichen}</figcaption>\r\n      </figure>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default GameField;","import React, { useState } from 'react';\r\nimport GameField from './gameField';\r\n\r\nfunction arrayShuffle(){\r\n    var tmp, rand;\r\n    for(var i =0; i < this.length; i++){\r\n      rand = Math.floor(Math.random() * this.length);\r\n      tmp = this[i]; \r\n      this[i] = this[rand]; \r\n      this[rand] =tmp;\r\n    }\r\n  }\r\n  \r\n  Array.prototype.shuffle = arrayShuffle;\r\n\r\nconst GameFields = (props) => {\r\n    const [clickedArray, setClickedArray] = useState([]);\r\n\r\n    const clickField = (field) => {\r\n        const len = clickedArray.length\r\n        if(Object.values(clickedArray).includes(field)) {\r\n            if(props.HS < len) props.setHS(len);\r\n            props.setS(0);\r\n            setClickedArray([]);    \r\n        } else {\r\n            setClickedArray([...clickedArray, field]);\r\n            props.setS(len+1);\r\n        }\r\n    }\r\n\r\n    const fieldsArray = () => {\r\n        let numberArray = [1, 2, 3, 4, 5, 6, 7, 8 ,9];\r\n        numberArray.shuffle();\r\n        console.log(numberArray)\r\n        return numberArray\r\n    }\r\n\r\n  return (\r\n    <div className=\"cardContainer\">\r\n        {fieldsArray().map((number) => {\r\n            return <GameField zeichen={number} func={clickField} />;\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameFields;","import React, { useState } from 'react';\r\nimport Header from './Header';\r\nimport GameFields from './GameFields';\r\n\r\nconst Game = () => {\r\n    const [score, setScore] = useState(0);\r\n    console.log(score);\r\n    const [hscore, setHScore] = useState(0);\r\n\r\n    const setS = (s) => {\r\n        setScore(s);\r\n    };\r\n\r\n    console.log(score);\r\n\r\n    const setHS = (val) => {\r\n        setHScore(val);\r\n    };\r\n\r\n  return (\r\n    <div>\r\n        <Header score={score} hscore={hscore} />\r\n        <div>\r\n          <GameFields setS={setS} HS={hscore} setHS={setHS} />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import './App.css';\nimport Game from './components/Game';\n\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <button className=\"testB\">\n        <figure className=\"figureB\">\n          <img className=\"imageB\" src=\"https://raw.githubusercontent.com/ding-09/memory-game/5458492d491fb84d2cd0f75c6c8ef88070238b32/src/images/curry.jpg\" alt=\"lost\"/>\n          <figcaption className=\"captionB\">Lol</figcaption>\n        </figure>\n\n      </button>\n      \n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}